# This is the workflow to setup the environment for Data Platform CI/CD pipelines
# 
# AZURE: Before this workflow will run successfully you must do the following
# 1. Run manualPrep.ps1 and set up the AZ_SP_CREDENTIALS and AZ_SP_OBJECT_ID secrets in Settings > Secrets > "New repository secret" 
# 2. Set up the SSH_PASSPHRASE secret in Settings > Secrets > "New repository secret"

name: CI/CD Environment Setup

on:
  workflow_dispatch: 
    inputs:
      projectName:
        description: 'Project Name'     
        required: true
        default: 'db-cicd-with-github-actions'
      linuxNodePoolDefaultVMSize:
        description: 'Linux Node Pool Default VM Size'     
        required: true
        default: 'Standard_D1_v2'
      windowsNodePoolDefaultVMSize:
        description: 'Windows Node Pool Default VM Size'     
        required: true
        default: 'Standard_D3_v2'

jobs:
  build:
    name: Setup Azure Environment
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: ${{ github.event.inputs.projectName }}
      LINUX_NODEPOOL_DEFAULT_VM_SIZE: ${{ github.event.inputs.linuxNodePoolDefaultVMSize }}
      WINDOWS_NODEPOOL_DEFAULT_VM_SIZE: ${{ github.event.inputs.windowsNodePoolDefaultVMSize }}
      # TODO: generalize the pipeline by allowing the fetch of credentials based on project name a la ${{ join(['secrets.AZ_SP_CRED_',github.event.inputs.projectName],''}}
      # AZ_SERVICE_PRINCIPAL_CREDENTIALS: ${{ secrets.AZ_SP_CREDENTIALS }}
      AZ_SERVICE_PRINCIPAL_CREDENTIALS: ${{ format('secrets.AZ_SP_CRED_{0}', github.event.inputs.projectName) }}
      SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}

    steps:
      - uses: actions/checkout@v2

      - name: test dynamic environment variables
        shell: pwsh
        run: |
          Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";
          Write-Host "";
          Write-Host ("projectName value: {0}" -f $env:PROJECT_NAME);
          Write-Host ("LINUX_NODEPOOL_DEFAULT_VM_SIZE value: {0}" -f $env:LINUX_NODEPOOL_DEFAULT_VM_SIZE); 
          Write-Host ("WINDOWS_NODEPOOL_DEFAULT_VM_SIZE: {0}" -f "$env:WINDOWS_NODEPOOL_DEFAULT_VM_SIZE"); 
          Write-Host ("AZ_SERVICE_PRINCIPAL_CREDENTIALS: {0}" -f "$env:AZ_SERVICE_PRINCIPAL_CREDENTIALS"); 
          Write-Host "";
          Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";


      # documentation: https://github.com/azure/login#configure-azure-credentials
      # TODO: set up a service principal which has permission only on the resource group and associated resources it creates
      # MDP: This task can be replaced with Connect-AzAccount via service principal (https://docs.microsoft.com/en-us/powershell/azure/authenticate-azureps?view=azps-5.3.0). However for most pipelines, which would use azure powershell more than once, this is an anti-pattern.
      # TODO: measure difference in performance between using this task and Connect-AzAccount in the next task
      - name: login via az module
        if: ${{ false }}
        uses: azure/login@v1
        with:
          creds: ${{secrets.az_sp_credentials}}
          enable-azpssession: true 

      # documentation: https://github.com/marketplace/actions/azure-powershell-action
      - name: run azure powershell script
        if: ${{ false }}
        uses: azure/powershell@v1
        with:
          azpsversion: 'latest'
          errorActionPreference: 'continue'
          inlineScript: |
            $Parameters = @{
              projectName = "$env:PROJECT_NAME";
              azServicePrincipalCredentials = "$env:AZ_SERVICE_PRINCIPAL_CREDENTIALS";
              sshPassphrase = "$env:SSH_PASSPHRASE";
              linuxNodePoolDefaultVMSize = "$env:LINUX_NODEPOOL_DEFAULT_VM_SIZE"
              windowsNodePoolDefaultVMSize = "$env:WINDOWS_NODEPOOL_DEFAULT_VM_SIZE"
              debugOn = $true;
            }; 
            ./envSetup/setup.ps1 @Parameters; 
