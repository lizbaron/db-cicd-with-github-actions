# This is the workflow to setup the environment for Data Platform CI/CD pipelines
# 
# AZURE: Before this workflow will run successfully you must do the following
# 1. Run manualPrep.ps1 and set up the AZ_SP_CREDENTIALS and AZ_SP_OBJECT_ID secrets in Settings > Secrets > "New repository secret" 
# 2. Set up the SSH_PASSPHRASE secret in Settings > Secrets > "New repository secret"

name: CI/CD Environment Setup

on:
  workflow_dispatch: 
    inputs:
      projectName:
        description: 'Project Name'     
        required: true
        default: 'db-cicd-with-github-actions'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: Setup Azure Environment
    runs-on: ubuntu-latest

    env:
      PROJECT_NAME: ${{ github.event.inputs.projectName }}
      AZ_SERVICE_PRINCIPAL_CREDENTIALS: ${{ secrets.AZ_SP_CREDENTIALS }}
      AZ_SERVICE_PRINCIPAL_OBJECT_ID: ${{ secrets.AZ_SP_OBJECT_ID }}
      SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # documentation: https://github.com/azure/login#configure-azure-credentials
      # next steps is to set up a service principal in azure which has permission to set up its own resource group and resources within that resource group, but not mess with those that it has not set up.
      - name: login via az module
        uses: azure/login@v1
        with:
          creds: ${{secrets.az_sp_credentials}}
          enable-azpssession: true 

      # documentation: https://github.com/marketplace/actions/azure-powershell-action
      - name: run azure powershell script
        uses: azure/powershell@v1
        with:
          azpsversion: 'latest'
          errorActionPreference: 'continue'
          inlineScript: |
            $Parameters = @{
              projectName = "$env:PROJECT_NAME";
              azServicePrincipalCredentials = "$env:AZ_SERVICE_PRINCIPAL_CREDENTIALS";
              azServicePrincipalObjectId = "$env:AZ_SERVICE_PRINCIPAL_OBJECT_ID";
              sshPassphrase = "$env:SSH_PASSPHRASE";
              debugOn = $true;
            }; 
            ./envSetup/setup.ps1 @Parameters; 
