name: Test Stuff

# Controls when the action will run. 
on:
  push:
    branches:
      - breaking-things
  workflow_dispatch: 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  job-1:
    name: set vars
    runs-on: windows-latest # Kubectl 1.20

    steps:
      - name: create vars
        id: create-vars
        shell: pwsh
        run: |
          $mssqlversions = @("2017","2019");
          
          $matrixData = @{};
          $mssqlversions|%{$matrixData += @{$_=@{mssqlversion=$_;port=41417;quotes="'3'"}}}

          $mssqlversionsString = '{"mssqlversion":'+($mssqlversions|ConvertTo-Json -compress)+'}'
          $matrixDataString = ($matrixData|ConvertTo-Json -compress).replace("'","''")

          Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";
          Write-Host "";
          Write-Host ("mssqlversionsString: {0}" -f "$mssqlversionsString"); 
          Write-Host ("matrixDataString: {0}" -f "$matrixDataString"); 
          Write-Host "";
          Write-Host "✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ✨   ";


          Write-Host ('::set-output name=mssqlversion::'+$mssqlversionsString)
          Write-Host ('::set-output name=matrixdata::'+$matrixDataString)
          
    outputs:
      mssqlversion: ${{ steps.create-vars.outputs.mssqlversion }}
      matrixdata: ${{ steps.create-vars.outputs.matrixdata }}

  job-2:
    name: read vars
    needs: job-1
    runs-on: windows-latest # Kubectl 1.20

    strategy:
      matrix: ${{fromJson(needs.job-1.outputs.mssqlversion)}}
 
    steps:
      - name: print vars
        id: print-vars
        shell: pwsh
        run: |
          $matrixData = ('${{ needs.job-1.outputs.matrixdata }}'|ConvertFrom-Json)
          $cc=$matrixData.${{ matrix.mssqlversion }}
          $cc|FT
          $cc.port




