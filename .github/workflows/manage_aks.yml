# This workflow creates the ACR images for the different suported SQL Server versions.

name: Manage AKS

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    # Run every sunday at 6:20 AM
    - cron:  '30 6 * * *'
  workflow_dispatch: 
    inputs:
      projectName:
        description: 'Project Name'     
        required: true
        default: 'test_20210224'
      aks_action:
        description: 'AKS Action: start or stop'     
        required: true
        default: 'stop'

jobs:

# ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–   
  aks-action:
    name: Apply Action to AKS
    runs-on: windows-latest
    if: ${{ github.event.inputs.aks_action == 'start' || github.event.inputs.aks_action == 'stop'}}

    env:
      PROJECT_NAME: ${{ github.event.inputs.projectName }}
      AZ_SERVICE_PRINCIPAL_CREDENTIALS: ${{ secrets[format('AZ_SP_CRED_{0}', github.event.inputs.projectName)] }}
      
    steps:
      - name: create variables
        id: create-vars
        shell: pwsh
        run: |
          function Get-MD5HashOfString($string) {
              $stringAsStream = [System.IO.MemoryStream]::new();
              $writer = [System.IO.StreamWriter]::new($stringAsStream);
              $writer.write($string);
              $writer.Flush();
              $stringAsStream.Position = 0;
              $hashedString = (Get-FileHash -InputStream $stringAsStream).Hash;
              return [String]$hashedString;
          }

          $projectNameHash = (Get-MD5HashOfString($env:PROJECT_NAME)).Substring(0,10);
          $azSecretsManagerName = "sm-" + $projectNameHash;

          Write-Host "âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   ";
          Write-Host "";
          Write-Host ("projectName value: {0}" -f $env:PROJECT_NAME);
          Write-Host ("azSecretsManagerName: {0}" -f "$azSecretsManagerName"); 
          Write-Host "";
          Write-Host "âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   âœ¨   ";
          
          Write-Host ('::set-output name=azsecretsmanagername::'+$azSecretsManagerName);
           
      - name: decode az sp cred
        id: cred-decode
        shell: pwsh
        run: |
          $decodedCreds = [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String("${{ env.AZ_SERVICE_PRINCIPAL_CREDENTIALS}}"))
          Write-Host ('::set-output name=az_sp_creds::'+$decodedCreds);

       # documentation: https://github.com/azure/login#configure-azure-credentials
      - name: login via az module
        uses: azure/login@v1
        with:
          creds: ${{ steps.cred-decode.outputs.az_sp_creds }}
          enable-AzPSSession: true 

      # documentation: https://github.com/Azure/get-keyvault-secrets
      - name: get azure secrets
        id: azure-secrets
        uses: Azure/get-keyvault-secrets@v1.0
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true' # Note that this task can be replaced with a similar pattern as setting the namespace to the env variables (above), but is also not secure.
        with:
          keyvault: ${{ steps.create-vars.outputs.azsecretsmanagername }}
          secrets: 'azResourceGroupName,aksClusterName'  # comma separated list of secret keys that need to be fetched from the Key Vault 

      - name: aks action
        id: aks-action
        uses: azure/powershell@v1
        with:
          azpsversion: 'latest'
          errorActionPreference: 'continue'
          inlineScript: |
            az aks ${{ github.event.inputs.aks_action }} --name ${{ steps.azure-secrets.outputs.aksClusterName }} --resource-group ${{ steps.azure-secrets.outputs.azResourceGroupName }}

# ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–  ðŸ’–   
  unknown-aks-action:
    name: Unknown Action for AKS
    runs-on: windows-latest
    if: ${{ github.event.inputs.aks_action != 'stop' && github.event.inputs.aks_action != 'start'}}

    steps:
      - name: unknown action error
        shell: pwsh
        run: |
            Write-Host ("::error::âœ¨   âœ¨   âœ¨ `"${{ github.event_name }}`" is not a valid option. âœ¨   âœ¨   âœ¨");
            Write-Host ("::error::âœ¨   âœ¨   âœ¨ `"stop`" and `"start`" are the only options! âœ¨   âœ¨   âœ¨");
            exit 1; 
